name: vault

services:
  # the hashicorp/vault image automatically creates a volume and mounts to /vault/file
  # so using that with raft, even though the naming conventions do not match.

  # perf primary - san francisco, california
  usca:
    image: ${VAULT_IMAGE}:${VAULT_VERSION}
    command: &vault-command
      - /bin/sh
      - -c
      - |
        until PROXY_ADDR=$(nslookup -type=a lb-$$CLUSTER_CONTEXT | grep -Eo "Address:.*(\d+\.){3}(\d+)$" | grep -Eo "(\d+\.){3}(\d+)") ; do sleep 1 ; done

        # constructing logical redundancy zones - 1, 2, and 3. unaware of a simple way to get the index of the container in the service to do so
        i=$(nslookup $(hostname -i) | tail -2 | rev | awk -F \. 'match($0, /[0-9]+/) {print substr($0, RSTART, RLENGTH)}')
        AZ=$(( (i-1) % 3 +1 ))

        sed "s|{{AZ}}|$$AZ|g ; s|{{CLUSTER_VERSION}}|$$CLUSTER_VERSION|g ; s|{{HOSTNAME}}|$$HOSTNAME|g ; s|{{CLUSTER_CONTEXT}}|$$CLUSTER_CONTEXT|g ; s|{{DOMAIN}}|$$DOMAIN|g ; s|{{PROXY_ADDR}}|$$PROXY_ADDR|g" /tmp/vault.tpl.hcl > /vault/config/vault.hcl
        /bin/vault server -config=/vault/config -log-format=json #-log-level=debug
    restart: unless-stopped
    deploy:
      replicas: 6
    networks: &vault-flat
      - vault
    ports: &vault-ports
      - 8200/tcp
    environment: &vault-env-vars
      VAULT_LICENSE_PATH: /vault/license/vault.hclic
      VAULT_CACERT: /vault/tls/ca.pem
      DOMAIN: example.internal
      CLUSTER_CONTEXT: usca
      CLUSTER_VERSION: 0.0.1
    configs: &usca-configs
      # shared configs
      - source: vault-tpl-config
        target: /tmp/vault.tpl.hcl
      - source: root-ca
        target: /vault/tls/ca.pem
      # per cluster configs
      - source: usca-pki-bundle
        target: /vault/tls/bundle.pem
    secrets: &usca-secrets
      # shared secrets
      - source: vault-enterprise-license
        target: /vault/license/vault.hclic
      # per cluster secrets
      - source: usca-pki-key
        target: /vault/tls/key.pem
    cap_add: &vault-capabilities
      - IPC_LOCK

  # perf secondary - new york, new york
  usny:
    image: ${VAULT_IMAGE}:${VAULT_VERSION}
    command: *vault-command
    restart: unless-stopped
    deploy:  &vault-servers
      replicas: 3
    networks: *vault-flat
    ports: *vault-ports
    environment:
      <<: *vault-env-vars
      CLUSTER_CONTEXT: usny
    configs:
      # shared configs
      - source: vault-tpl-config
        target: /tmp/vault.tpl.hcl
      - source: root-ca
        target: /vault/tls/ca.pem
      # per cluster configs
      - source: usny-pki-bundle
        target: /vault/tls/bundle.pem
    secrets:
      # shared secrets
      - source: vault-enterprise-license
        target: /vault/license/vault.hclic
      # per cluster secrets
      - source: usny-pki-key
        target: /vault/tls/key.pem
    cap_add: *vault-capabilities

  # perf primary dr - chicago, illinois
  usil:
    image: ${VAULT_IMAGE}:${VAULT_VERSION}
    command: *vault-command
    restart: unless-stopped
    deploy: *vault-servers
    networks: *vault-flat
    ports: *vault-ports
    environment:
      <<: *vault-env-vars
      CLUSTER_CONTEXT: usil
    configs:
      # shared configs
      - source: vault-tpl-config
        target: /tmp/vault.tpl.hcl
      - source: root-ca
        target: /vault/tls/ca.pem
      # per cluster configs
      - source: usil-pki-bundle
        target: /vault/tls/bundle.pem
    secrets:
      # shared secrets
      - source: vault-enterprise-license
        target: /vault/license/vault.hclic
      # per cluster secrets
      - source: usil-pki-key
        target: /vault/tls/key.pem
    cap_add: *vault-capabilities

  # perf secondary dr - austin, texas
  ustx:
    image: ${VAULT_IMAGE}:${VAULT_VERSION}
    command: *vault-command
    restart: unless-stopped
    deploy: *vault-servers
    networks: *vault-flat
    ports: *vault-ports
    environment:
      <<: *vault-env-vars
      CLUSTER_CONTEXT: ustx
    configs:
      # shared configs
      - source: vault-tpl-config
        target: /tmp/vault.tpl.hcl
      - source: root-ca
        target: /vault/tls/ca.pem
      # per cluster configs
      - source: ustx-pki-bundle
        target: /vault/tls/bundle.pem
    secrets:
      # shared secrets
      - source: vault-enterprise-license
        target: /vault/license/vault.hclic
      # per cluster secrets
      - source: ustx-pki-key
        target: /vault/tls/key.pem
    cap_add: *vault-capabilities


  # the haproxy image defaults to haproxy/haproxy for user and group. /tmp is writable
  # so using that directory for config as its of little significance in this demo/test env.

  # load balancers
  lb-usca:
    image: ${LB_IMAGE}:${LB_VERSION}
    labels: &lb-labels
      name: haproxy
    command: &lb-command
      - /bin/sh
      - -c
      - |
        sed "s|{{DOMAIN}}|$$DOMAIN|g ; s|{{CLUSTER_CONTEXT}}|$$CLUSTER_CONTEXT|g" /tmp/haproxy.tpl.cfg > /tmp/haproxy.cfg
        haproxy -W -db -f /tmp/haproxy.cfg
    restart: unless-stopped
    networks: *vault-flat
    ports: &lb-ports
      - 443/tcp
      - 9000/tcp
    environment: &lb-env-vars
      DOMAIN: example.internal
      CLUSTER_CONTEXT: usca
    configs: &lb-configs
      - source: haproxy-tpl-config
        target: /tmp/haproxy.tpl.cfg
      - source: root-ca
        target: /tmp/ca.pem

  lb-usny:
    image: ${LB_IMAGE}:${LB_VERSION}
    labels: *lb-labels
    command: *lb-command
    restart: unless-stopped
    networks: *vault-flat
    ports: *lb-ports
    environment:
      <<: *lb-env-vars
      CLUSTER_CONTEXT: usny
    configs: *lb-configs

  lb-usil:
    image: ${LB_IMAGE}:${LB_VERSION}
    labels: *lb-labels
    command: *lb-command
    restart: unless-stopped
    networks: *vault-flat
    ports: *lb-ports
    environment:
      <<: *lb-env-vars
      CLUSTER_CONTEXT: usil
    configs: *lb-configs

  lb-ustx:
    image: ${LB_IMAGE}:${LB_VERSION}
    labels: *lb-labels
    command: *lb-command
    restart: unless-stopped
    networks: *vault-flat
    ports: *lb-ports
    environment:
      <<: *lb-env-vars
      CLUSTER_CONTEXT: ustx
    configs: *lb-configs

  # addons: telemetry
  prometheus:
    image: ${PROMETHEUS_IMAGE}:${PROMETHEUS_VERSION}
    command: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --storage.tsdb.retention.time=1d
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
      --web.enable-lifecycle
    restart: unless-stopped
    networks: *vault-flat
    ports:
      - 9090:9090/tcp
    configs:
      # shared configs
      - source: root-ca
        target: /prometheus/ca.pem
      # prometheus configs
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus-storage:/prometheus

  promtail:
    image: ${PROMTAIL_IMAGE}:${PROMTAIL_VERSION}
    command: >
      -config.file=/etc/promtail/promtail.yml
      -config.expand-env
      -server.enable-runtime-reload
      -log-config-reverse-order
      -log.level=debug
    restart: unless-stopped
    networks: *vault-flat
    ports:
      - 8000:8000/tcp
    configs:
      - source: promtail-config
        target: /etc/promtail/promtail.yml
    volumes:
      - ${PROMTAIL_DOCKER_SOCKET}:/docker.sock

  loki:
    image: ${LOKI_IMAGE}:${LOKI_VERSION}
    command: >
      -config.file=/etc/loki/config.yml
      -log-config-reverse-order
    restart: unless-stopped
    networks: *vault-flat
    ports:
      - 3100:3100/tcp
    configs:
      - source: loki-config
        target: /etc/loki/config.yml
    volumes:
      - loki-storage:/tmp

  grafana:
    image: ${GRAFANA_IMAGE}:${GRAFANA_VERSION}
    restart: unless-stopped
    networks: *vault-flat
    ports:
      - 3000:3000/tcp
    environment:
      GF_DASHBOARDS_VERSIONS_TO_KEEP: 1
      GF_INSTALL_PLUGINS: grafana-clock-panel
      GF_LOG_LEVEL: info
      GF_LOG_MODE:  console
      GF_SERVER_ENABLE_GZIP: true
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_AUTH_ANONYMOUS_ENABLED: true
    configs:
      - source: grafana-datasources
        target: /etc/grafana/provisioning/datasources/datasources.yml
      - source: grafana-dashboards
        target: /etc/grafana/provisioning/dashboards/dashboards.yml
    volumes:
      - grafana-storage:/var/lib/grafana
      - ${GRAFANA_DASHBOARDS}:/var/lib/grafana/dashboards


  # addons: synthetic traffic
  # benchmark:
  #   # https://github.com/hashicorp/vault-benchmark
  #   # https://developer.hashicorp.com/vault/tutorials/operations/benchmark-vault
  #   image: hashicorp/vault-benchmark:0.3
  #   command:
  #     - /bin/sh
  #     - -c
  #     - |
  #       sed "s|{{DURATION}}|$$DURATION|g ; s|{{REPORT_MODE}}|$$REPORT_MODE|g" /tmp/vault-benchmark.tpl.hcl > $$HOME/vault-benchmark.hcl
  #       /bin/vault-benchmark run -config=$$HOME/vault-benchmark.hcl
  #   restart: no
  #   networks: *vault-flat
  #   environment:
  #     X_VAULT_BENCHMARK_ENABLED: true
  #     VAULT_BENCHMARK_LOG_LEVEL: DEBUG
  #     VAULT_CACERT: /tmp/ca.pem
  #     VAULT_ADDR: https://lb-usca.example.internal
  #     VAULT_TOKEN:
  #     #VAULT_NAMESPACE: ns1
  #     DURATION: 10s
  #     REPORT_MODE: terse # json
  #   configs:
  #     - source: vault-benchmark-tpl-config
  #       target: /tmp/vault-benchmark.tpl.hcl
  #     - source: root-ca
  #       target: /tmp/ca.pem

networks:
  vault:
    name: example.internal

configs:
  # shared configs
  vault-tpl-config:
    file: ./vault.tpl.hcl
  root-ca:
    file: ./tls/root-ca/dev-root-ca.pem
  haproxy-tpl-config:
    file: ./haproxy.tpl.cfg
  # per cluster configs
  usca-pki-bundle:
    file: ./tls/usca/bundle.pem
  usny-pki-bundle:
    file: ./tls/usny/bundle.pem
  usil-pki-bundle:
    file: ./tls/usil/bundle.pem
  ustx-pki-bundle:
    file: ./tls/ustx/bundle.pem
  # add-ons
  prometheus-config:
    file: ./telemetry/prometheus.yml
  promtail-config:
    file: ./telemetry/promtail.yml
  loki-config:
    file: ./telemetry/loki.yml
  grafana-datasources:
    file: ./telemetry/grafana-datasources.yml
  grafana-dashboards:
    file: ./telemetry/grafana-dashboards.yml
  # vault-benchmark-tpl-config:
  #   file: ./vault-benchmark.tpl.hcl

secrets:
  # shared secrets
  vault-enterprise-license:
    file: ${VAULT_LICENSE_PATH}
  # per cluster secrets
  usca-pki-key:
    file: ./tls/usca/key.pem
  usny-pki-key:
    file: ./tls/usny/key.pem
  usil-pki-key:
    file: ./tls/usil/key.pem
  ustx-pki-key:
    file: ./tls/ustx/key.pem

volumes:
  prometheus-storage: {}
  loki-storage: {}
  grafana-storage: {}
