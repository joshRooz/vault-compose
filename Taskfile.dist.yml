version: '3'

env:
  PRIMARY: usca
  DR_PRIMARY: usil
  PERF_REPLICA: usny
  DR_PERF_REPLICA: ustx  # DR for the Performance Replica

  COMPOSE_PROJECT: vault  # yq .name compose.yaml
  COMPOSE_NETWORK: example.internal  # yq .networks[].name compose.yaml

tasks:
  up:
    cmds:
      - task: create-pki
      - task: compose-up
      - task: init-primary
      - task: init-perf-secondaries
      - task: init-dr-secondaries

  down:
    deps: [compose-down, delete-secrets, delete-recovery-files]  # reminder deps run in parallel
    silent: true



  # helpers
  show-ports:
    cmds:
      - docker ps --format=json | jq -sr '[ .[] | [.Names,.ID,.Ports] ] | sort | .[] | @tsv'

  show-ports-lb:
    cmds:
      - docker ps --format=json | jq -sr '[ .[] | select(.Names | contains("-lb-")) | [.Names,.ID,.Ports] ] | sort | .[] | @tsv'

  show-network:
    cmds:
      - docker inspect example.internal | jq -r '[ .[].Containers | (to_entries).[] | [.value.Name,.key[:12],.value.IPv4Address] ]| sort | .[]| @tsv'

  promtheus-reload:
    cmds:
      - curl -X POST localhost:9090/-/reload

  promtail-reload:
    cmds:
      - curl -X POST localhost:8000/reload

  # https://grafana.com/docs/grafana/latest/developers/http_api/admin/#reload-provisioning-configurations
  grafana-reload:
    cmds:
      - curl -X POST grafana:grafana@localhost:3000/api/admin/provisioning/datasources/reload
      - curl -X POST grafana:grafana@localhost:3000/api/admin/provisioning/dashboards/reload
      - curl -X POST grafana:grafana@localhost:3000/api/admin/provisioning/plugins/reload


  # simulation rules
  network-disrupt: # real 0m3.528s
    label: "{{.TASK}}: primary <-> perf-replica"
    dir: scripts
    cmds:
      # primary --x perf-replica
      - ./network-segmentation.sh -m deny -i {{.PERF_REPLICA}} -s {{.PRIMARY}} -c {{.COMPOSE_PROJECT}}
      # perf-replica --x primary
      - ./network-segmentation.sh -m deny -i {{.PRIMARY}} -s {{.PERF_REPLICA}} -c {{.COMPOSE_PROJECT}}

  network-repair:
    label: "{{.TASK}}: primary <-> perf-replica"
    dir: scripts
    cmds:
      # primary --> perf-replica
      - ./network-segmentation.sh -m allow -i {{.PERF_REPLICA}} -s {{.PRIMARY}} -c {{.COMPOSE_PROJECT}}
      # perf-replica --> primary
      - ./network-segmentation.sh -m allow -i {{.PRIMARY}} -s {{.PERF_REPLICA}} -c {{.COMPOSE_PROJECT}}




  # setup rules
  create-pki:
    dir: scripts
    cmds:
      - ./init-pki.sh {{.COMPOSE_NETWORK}}

  compose-up:
    cmds:
      - docker compose up -d

  init-primary:
    dir: scripts
    cmds:
      - ./init-primary.sh -p {{.PRIMARY}} -c {{.COMPOSE_PROJECT}}

  init-perf-secondaries:
    dir: scripts
    cmds:
      - ./init-perf-replica.sh -r {{.PERF_REPLICA}} -p {{.PRIMARY}} -c {{.COMPOSE_PROJECT}} -d {{.COMPOSE_NETWORK}}

  # runs in parallel; as such session output will not be sequential
  init-dr-secondaries:
    deps: [init-primary-dr, init-perf-dr]

  init-primary-dr:
    dir: scripts
    internal: true
    cmds:
      - ./init-dr-secondary.sh -r {{.DR_PRIMARY}} -p {{.PRIMARY}} -c {{.COMPOSE_PROJECT}} -d {{.COMPOSE_NETWORK}}

  init-perf-dr:
    dir: scripts
    internal: true
    cmds:
      - ./init-dr-secondary.sh -r {{.DR_PERF_REPLICA}} -p {{.PERF_REPLICA}} -c {{.COMPOSE_PROJECT}} -d {{.COMPOSE_NETWORK}}



  # clean-up rules
  compose-down:
    internal: true
    cmds:
      - docker compose down
      - cmd: docker volume prune -f >/dev/null
        ignore_error: true

  delete-secrets:
    internal: true
    cmds:
      - cmd: rm -r tls secrets/init.json
        ignore_error: true

  delete-recovery-files:
    internal: true
    cmds:
      - cmd: rm -r secrets/init-backup.json snapshots
        ignore_error: true

  delete-volumes: # helper rule that does not run by default
    cmds:
      - docker volume rm vault_grafana-storage vault_loki-storage vault_prometheus-storage